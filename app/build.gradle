apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
//apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
/*apply plugin: 'com.dicedmelon.gradle.jacoco-android'*/
apply plugin: 'com.google.gms.google-services'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
//    androidExtensions {
//        experimental = true
//    }
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.gregspitz.flashcardappkotlin"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            testCoverageEnabled true
        }
    }
    flavorDimensions "default"
    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            dimension "default"
            applicationIdSuffix = ".mock"
        }
        prod {
            dimension "default"
        }
    }
    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }
    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        unitTests {
            all {
                testLogging {
                    // Always show the result of every unit test, even if it passes.
                    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                }
            }
        }
    }
}

/*tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}*/

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.constraintLayoutVersion"
    implementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    implementation "android.arch.lifecycle:extensions:$rootProject.archLifecycleVersion"
    implementation "android.arch.persistence.room:runtime:$rootProject.archRoomVersion"
    implementation "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    implementation "com.google.firebase:firebase-auth:$rootProject.firebaseAuthVersion"
    implementation "com.google.android.gms:play-services-auth:$rootProject.playServicesAuthVersion"
    implementation "com.google.firebase:firebase-database:$rootProject.firebaseDatabaseVersion"
    implementation "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    implementation "com.squareup.picasso:picasso:$rootProject.picassoVersion"
    implementation "jp.wasabeef:picasso-transformations:$rootProject.picassoTransformationsVersion"
    kapt "android.arch.persistence.room:compiler:$rootProject.archRoomVersion"

    // Flexible Adapter
    // https://github.com/davideas/FlexibleAdapter
    implementation "eu.davidea:flexible-adapter:$rootProject.flexibleAdapterVersion"
    implementation "eu.davidea:flexible-adapter-ui:$rootProject.flexibleAdapterUiVersion"
    implementation "eu.davidea:flexible-adapter-livedata:$rootProject.flexibleAdapterLiveDataVersion"
    implementation "eu.davidea:flexible-adapter-databinding:$rootProject.flexibleAdapterDataBindingVersion"

    // Uncommon maths for probability distribution
    implementation files('libs/uncommons-maths-1.2.3.jar')

    // Dagger
    implementation "com.google.dagger:dagger-android:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$rootProject.kaptDaggerCompilerVersion"
    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "com.nhaarman:mockito-kotlin:$rootProject.mockitoKotlinVersion"
    androidTestImplementation "com.android.support.test:runner:$rootProject.supportTestRunnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "android.arch.persistence.room:testing:$rootProject.archRoomVersion"
    androidTestUtil "com.android.support.test:orchestrator:$rootProject.supportTestRunnerVersion"
}
